import java.util.*;

/*
public class Point {
    int x;
    int y;
    public Point(int x, int y) {
        this.x = x;
        this.y = y;
    }
    public Point() {
        this.x = 0;
        this.y = 0;
    }
}*/

public class DenseLine {
    public double[] getLine(Point[] p, int n) {
        // write code here
        Line bestLine=null;
        int bestCount=0;
        HashMap<Double,ArrayList<Line>> linesBySlope = new HashMap<Double,ArrayList<Line>>();
        for(int i=0;i<n;i++){
            for(int j=i+1;i<n;j++){
                Line line = new Line(p[i],p[j]);
                insertLine(linesBySlope,line);
                int count=countEquivalentLines(linesBySlope,line);
                if(count>bestCount){
                    bestLine=line;
                    bestCount=count;
                }
              }
            }
        if(bestLine==null)
            return new double[]{};
        return new double[]{bestLine.slope,bestLine.intecept};
        }
    int countEquivalentLines(ArrayList<Line> lines,Line line){
        if(lines==null)
            return 0;
        int count=0;
        for(Line parallenlLine:lines){
            if(parallenlLine.isEquivalent(line))
                count++;
        }
        return count;
    }
    int countEquivalentLines(HashMap<Double,ArrayList<Line>> linesBySlope,Line line){
        double key=floorToNearestEpsilon(line.slope);
        double eps=0.000001;
        int count=countEquivalentLines(linesBySlope.get(key),line)+
            countEquivalentLines(linesBySlope.get(key-eps),line)+
            countEquivalentLines(linesBySlope.get(key+eps),line);
        return count;
    }
    void insertLine(HashMap<Double,ArrayList<Line>> linesBySlope,Line line){
        ArrayList<Line> lines = null;
        double key =floorToNearestEpsilon(line.slope);
        if(!linesBySlope.containsKey(key)){
            lines = new ArrayList<Line>();
            linesBySlope.put(key,lines);
        }else
            lines=linesBySlope.get(key);
        lines.add(line);
    }
    class Line{
        public  double epsilon=0.000001;
        public double slope,intecept;
        private boolean infinite_slope=false;
        public Line(Point p,Point q){
            if(Math.abs(p.x-q.x)>epsilon){
                slope=(p.y-q.y)/(p.x-q.x);
                intecept=p.y-slope*p.x;
            }else{
                infinite_slope=true;
                intecept=p.x;
            }
        }
        public  double floorToNearestEpsilon(double d){
        	int r=(int)(d/epsilon);
        	return ((double)r)*epsilon;
    	}
        public boolean isEquivalent(double a,double b){
            return (Math.abs(a-b)<epsilon);
        }
        public boolean isEquivalent(Object o){
            Line l=(Line)o;
            if(isEquivalent(l.slope,slope)&&isEquivalent(l.intecept,intecept)&&
               (infinite_slope==l.infinite_slope)){
                return true;
            }
            return false;
        }
    }
    public  double floorToNearestEpsilon(double d){
        double epsilon=0.000001;
        int r=(int)(d/epsilon);
        return ((double)r)*epsilon;
    }
 }
    
    
