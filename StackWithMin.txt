public class StackWithMin extends Stack<NodeWithMin>{
    public push(int data){
        int min=Math.min(data.min,min());
        super.push(new NodeWithMin(data,min));         
    }
    public int pop(){
        return super.pop().data;
    }
    public int min(){
        if(this.empty())
            return Integer.MAX_VALUE;
        return super.peek().min;
    }
    class NodeWithMin{
        private int data;
        private int min;
        public NodeWithMin(int data,int min){
            this.data=data;
            this.min=min;
        }
    }    
}
public class StackWithMin2 extends Stack<Integer>{
    Stack<Integer> s2=new Stack<Integer>();
    public void push(int value){
        if(value<=min())
            s2.push(value);
        super.push(value);
    }
    public int pop(){
        int value=super.pop();
        if(value==min())
            s2.pop();
        return value;
    }
    public int min(){
        if(s2.isEmpty()){
            return Integer.MAX_VALUE;
        }
        return s2.peek();
    }
}