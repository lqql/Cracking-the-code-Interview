public class SetOfStacks {
    ArrayList<Stack>list = new ArrayList<Stack>();
    public int capacity;
    public SetOfStacks(int capacity){
        this.capacity=capacity;
    }
    public Stack getLastStack(){
        if(list.size()==0)
            return null;
        return list.get(list.size()-1);
    }
    public void push(int data){
        Stack last = getLastStack();
        if(last!=null&&!stack.isFull())
            last.push(data);
        else{
            Stack stack=new Stack(capacity);
            stack.push(data);
            list.add(stacl);
        }
    }
    public int pop(){
        Stack last=getLastStack();
        if(last!=null){
            int v=last.pop();
            if(last.size==0)
                list.remove(list.size()-1);
            return v;
        }
        return Integer.MAX_VALUE;
    }
    public int popAt(int index){
        return leftShift(index ,true);
    }
    public int leftShift(int index,boolean removeTop){
        Stack stack=list.get(index);
        int removed_item;
        if(removeTop)
            remove_item=stack.pop();
        else
            remove_item=stack.removeBottom();
        if(stack.isEmpty()){
            list.remove(index);
        }else if(list.size()>index+1){
            int v=leftShift(index+1,false);
            stack.push(v);
        }
        return remove_item;
    }
}